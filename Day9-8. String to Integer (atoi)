class Solution {
public:
    int myAtoi(string s) {
        int num = 0, i = 0,sign = 1;//+ve
        //1)ignore leading whitespaces
          
       while(s[i] == ' '){
        i++;
       }
       //2)determine sign and out of bond
       if(i < s.size() && (s[i] == '-' || s[i] == '+')){
        sign = s[i] == '+' ? 1 : -1;
        ++i;
       }
       //3)if digit found after finding sign 
       while(i<s.size() && isdigit(s[i])) {

        //out of bound case  
         if(num > INT_MAX / 10 || (num == INT_MAX/10 && s[i] > '7')) {
            return sign == -1 ? INT_MIN : INT_MAX;
         }
               num = num * 10 + (s[i] - '0'); //char to int
               ++i;
       }
       return num*sign; //if digit nahi heto return 0.

    }
};
