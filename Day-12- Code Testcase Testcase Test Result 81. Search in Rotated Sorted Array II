class Solution {
public:
 bool search(vector<int>& nums, int target) {
        int n = nums.size();
        int low = 0;
        int high = n - 1;
        while (low <= high) {
            int mid = (low + high) / 2;
            
            if (nums[mid] == target) return true; // found target
           

           //shrink if mid not equal to targt and high and low and mid are same 
            if(nums[low] == nums[mid] && nums[mid] == nums[high]) {
                low++;high--;
                continue;
            }
            
            // Left side is sorted
            if (nums[low] <= nums[mid]) {
                if (nums[low] <= target && target <= nums[mid]) {
                    high = mid - 1; // Target is in the left half
                } else {
                    low = mid + 1; // Target is in the right half
                }
            } 
            // Right side is sorted
            else {
                if (nums[mid] <= target && target <= nums[high]) {
                    low = mid + 1; // Target is in the right half
                } else {
                    high = mid - 1; // Target is in the left half
                }
            }
        }
        return false; 
    }
};
